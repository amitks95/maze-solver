{"ast":null,"code":"var _jsxFileName = \"D:\\\\maze-solver-main\\\\src\\\\components\\\\DarkModeToggle\\\\DarkModeToggle.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport \"./DarkModeToggle.scss\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CheckedIcon = () => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: \"\\uD83C\\uDF1C\"\n}, void 0, false);\n\n_c = CheckedIcon;\n\nconst UncheckedIcon = () => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: \"\\uD83C\\uDF1E\"\n}, void 0, false);\n\n_c2 = UncheckedIcon;\n\nconst DarkModeToggle = props => {\n  _s();\n\n  const [toggle, setToggle] = useState(false);\n  const {\n    defaultChecked,\n    onChange,\n    disabled,\n    className\n  } = props;\n  useEffect(() => {\n    if (defaultChecked) {\n      setToggle(defaultChecked);\n    }\n  }, [defaultChecked]);\n\n  const triggerToggle = () => {\n    if (disabled) {\n      return;\n    }\n\n    setToggle(!toggle);\n\n    if (typeof onChange === 'function') {\n      onChange(!toggle);\n    }\n  };\n\n  const getIcon = type => {\n    const {\n      icons\n    } = props;\n\n    if (!icons) {\n      return null;\n    }\n\n    return icons[type] === undefined ? DarkModeToggle.defaultProps.icons[type] : icons[type];\n  };\n\n  const toggleClasses = classNames('wrg-toggle', {\n    'wrg-toggle--checked': toggle,\n    'wrg-toggle--disabled': disabled\n  }, className);\n\n  if (toggle) {\n    console.log('setting toggle');\n    document.body.classList.remove(\"DarkMode\");\n    document.body.classList.add(\"LightMode\");\n  } else {\n    document.body.classList.remove(\"LightMode\");\n    document.body.classList.add(\"DarkMode\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: triggerToggle,\n    className: toggleClasses,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrg-toggle-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wrg-toggle-check\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: getIcon('checked')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wrg-toggle-uncheck\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: getIcon('unchecked')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrg-toggle-circle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      \"aria-label\": \"Toggle Button\",\n      className: \"wrg-toggle-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DarkModeToggle, \"E5z+7KxU27TYd2kLomdFOtK8mpg=\");\n\n_c3 = DarkModeToggle;\nDarkModeToggle.defaultProps = {\n  icons: {\n    checked: /*#__PURE__*/_jsxDEV(CheckedIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 18\n    }, this),\n    unchecked: /*#__PURE__*/_jsxDEV(UncheckedIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 20\n    }, this)\n  }\n};\nDarkModeToggle.propTypes = {\n  disabled: PropTypes.bool,\n  defaultChecked: PropTypes.bool,\n  className: PropTypes.string,\n  onChange: PropTypes.func,\n  icons: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({\n    checked: PropTypes.node,\n    unchecked: PropTypes.node\n  })])\n};\nexport default DarkModeToggle;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CheckedIcon\");\n$RefreshReg$(_c2, \"UncheckedIcon\");\n$RefreshReg$(_c3, \"DarkModeToggle\");","map":{"version":3,"names":["React","useState","useEffect","PropTypes","classNames","CheckedIcon","UncheckedIcon","DarkModeToggle","props","toggle","setToggle","defaultChecked","onChange","disabled","className","triggerToggle","getIcon","type","icons","undefined","defaultProps","toggleClasses","console","log","document","body","classList","remove","add","checked","unchecked","propTypes","bool","string","func","oneOfType","shape","node"],"sources":["D:/maze-solver-main/src/components/DarkModeToggle/DarkModeToggle.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport \"./DarkModeToggle.scss\"\n\nconst CheckedIcon = () => <>ðŸŒœ</>;\nconst UncheckedIcon = () => <>ðŸŒž</>;\n\nconst DarkModeToggle = (props) => {\n\n    const [toggle, setToggle] = useState(false);\n    const { defaultChecked, onChange, disabled, className } = props;\n\n    useEffect(() => {\n        if (defaultChecked) {\n            setToggle(defaultChecked)\n        }\n    }, [defaultChecked]);\n\n    const triggerToggle = () => {\n        if ( disabled ) {\n            return;\n        }\n\n        setToggle(!toggle);\n\n        if ( typeof onChange === 'function' ) {\n            onChange(!toggle);\n        }\n    }\n\n    const getIcon = (type) => {\n        const { icons } = props;\n        if ( ! icons ) {\n            return null;\n        }\n\n        return icons[type] === undefined ?\n            DarkModeToggle.defaultProps.icons[type] :\n            icons[type];\n    }\n\n    const toggleClasses = classNames('wrg-toggle', {\n        'wrg-toggle--checked': toggle,\n        'wrg-toggle--disabled': disabled\n    }, className);\n\n    if (toggle) {\n        console.log('setting toggle')\n        document.body.classList.remove(\"DarkMode\");\n        document.body.classList.add(\"LightMode\");\n    }\n    else {\n        document.body.classList.remove(\"LightMode\");\n        document.body.classList.add(\"DarkMode\");\n    }\n\n    return (\n        <div onClick={triggerToggle} className={toggleClasses}>\n            <div className=\"wrg-toggle-container\">\n                <div className=\"wrg-toggle-check\">\n                    <span>{ getIcon('checked') }</span>\n                </div>\n                <div className=\"wrg-toggle-uncheck\">\n                    <span>{ getIcon('unchecked') }</span>\n                </div>\n            </div>\n            <div className=\"wrg-toggle-circle\"></div>\n            <input type=\"checkbox\" aria-label=\"Toggle Button\" className=\"wrg-toggle-input\" />\n        </div>\n    );\n}\n\nDarkModeToggle.defaultProps = {\n    icons: {\n        checked: <CheckedIcon />, \n        unchecked: <UncheckedIcon />\n    }\n};\n\nDarkModeToggle.propTypes = {\n    disabled: PropTypes.bool,\n    defaultChecked: PropTypes.bool,\n    className: PropTypes.string,\n    onChange: PropTypes.func,\n    icons: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.shape({\n            checked: PropTypes.node,\n            unchecked: PropTypes.node\n        })\n    ])\n};\n\nexport default DarkModeToggle;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAO,uBAAP;;;;AAEA,MAAMC,WAAW,GAAG,mBAAM;EAAA;AAAA,iBAA1B;;KAAMA,W;;AACN,MAAMC,aAAa,GAAG,mBAAM;EAAA;AAAA,iBAA5B;;MAAMA,a;;AAEN,MAAMC,cAAc,GAAIC,KAAD,IAAW;EAAA;;EAE9B,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,KAAD,CAApC;EACA,MAAM;IAAEU,cAAF;IAAkBC,QAAlB;IAA4BC,QAA5B;IAAsCC;EAAtC,IAAoDN,KAA1D;EAEAN,SAAS,CAAC,MAAM;IACZ,IAAIS,cAAJ,EAAoB;MAChBD,SAAS,CAACC,cAAD,CAAT;IACH;EACJ,CAJQ,EAIN,CAACA,cAAD,CAJM,CAAT;;EAMA,MAAMI,aAAa,GAAG,MAAM;IACxB,IAAKF,QAAL,EAAgB;MACZ;IACH;;IAEDH,SAAS,CAAC,CAACD,MAAF,CAAT;;IAEA,IAAK,OAAOG,QAAP,KAAoB,UAAzB,EAAsC;MAClCA,QAAQ,CAAC,CAACH,MAAF,CAAR;IACH;EACJ,CAVD;;EAYA,MAAMO,OAAO,GAAIC,IAAD,IAAU;IACtB,MAAM;MAAEC;IAAF,IAAYV,KAAlB;;IACA,IAAK,CAAEU,KAAP,EAAe;MACX,OAAO,IAAP;IACH;;IAED,OAAOA,KAAK,CAACD,IAAD,CAAL,KAAgBE,SAAhB,GACHZ,cAAc,CAACa,YAAf,CAA4BF,KAA5B,CAAkCD,IAAlC,CADG,GAEHC,KAAK,CAACD,IAAD,CAFT;EAGH,CATD;;EAWA,MAAMI,aAAa,GAAGjB,UAAU,CAAC,YAAD,EAAe;IAC3C,uBAAuBK,MADoB;IAE3C,wBAAwBI;EAFmB,CAAf,EAG7BC,SAH6B,CAAhC;;EAKA,IAAIL,MAAJ,EAAY;IACRa,OAAO,CAACC,GAAR,CAAY,gBAAZ;IACAC,QAAQ,CAACC,IAAT,CAAcC,SAAd,CAAwBC,MAAxB,CAA+B,UAA/B;IACAH,QAAQ,CAACC,IAAT,CAAcC,SAAd,CAAwBE,GAAxB,CAA4B,WAA5B;EACH,CAJD,MAKK;IACDJ,QAAQ,CAACC,IAAT,CAAcC,SAAd,CAAwBC,MAAxB,CAA+B,WAA/B;IACAH,QAAQ,CAACC,IAAT,CAAcC,SAAd,CAAwBE,GAAxB,CAA4B,UAA5B;EACH;;EAED,oBACI;IAAK,OAAO,EAAEb,aAAd;IAA6B,SAAS,EAAEM,aAAxC;IAAA,wBACI;MAAK,SAAS,EAAC,sBAAf;MAAA,wBACI;QAAK,SAAS,EAAC,kBAAf;QAAA,uBACI;UAAA,UAAQL,OAAO,CAAC,SAAD;QAAf;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QADJ,eAII;QAAK,SAAS,EAAC,oBAAf;QAAA,uBACI;UAAA,UAAQA,OAAO,CAAC,WAAD;QAAf;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QAJJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eASI;MAAK,SAAS,EAAC;IAAf;MAAA;MAAA;MAAA;IAAA,QATJ,eAUI;MAAO,IAAI,EAAC,UAAZ;MAAuB,cAAW,eAAlC;MAAkD,SAAS,EAAC;IAA5D;MAAA;MAAA;MAAA;IAAA,QAVJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAcH,CA/DD;;GAAMT,c;;MAAAA,c;AAiENA,cAAc,CAACa,YAAf,GAA8B;EAC1BF,KAAK,EAAE;IACHW,OAAO,eAAE,QAAC,WAAD;MAAA;MAAA;MAAA;IAAA,QADN;IAEHC,SAAS,eAAE,QAAC,aAAD;MAAA;MAAA;MAAA;IAAA;EAFR;AADmB,CAA9B;AAOAvB,cAAc,CAACwB,SAAf,GAA2B;EACvBlB,QAAQ,EAAEV,SAAS,CAAC6B,IADG;EAEvBrB,cAAc,EAAER,SAAS,CAAC6B,IAFH;EAGvBlB,SAAS,EAAEX,SAAS,CAAC8B,MAHE;EAIvBrB,QAAQ,EAAET,SAAS,CAAC+B,IAJG;EAKvBhB,KAAK,EAAEf,SAAS,CAACgC,SAAV,CAAoB,CACvBhC,SAAS,CAAC6B,IADa,EAEvB7B,SAAS,CAACiC,KAAV,CAAgB;IACZP,OAAO,EAAE1B,SAAS,CAACkC,IADP;IAEZP,SAAS,EAAE3B,SAAS,CAACkC;EAFT,CAAhB,CAFuB,CAApB;AALgB,CAA3B;AAcA,eAAe9B,cAAf"},"metadata":{},"sourceType":"module"}