{"ast":null,"code":"import { dijkstra } from \"./dijkstra\";\nimport { dfs } from \"./dfs\";\nimport { bfs } from \"./bfs\";\nimport { astar } from \"./astar\";\nexport { dijkstra, dfs, bfs, astar, getNodesInShortestPathOrder, getAllNodes, sortNodesByDistance, getUnvisitedNeighbours };\n/*----------------------------------------------------common helper functions----------------------------------------------------*/\n// returns an array of nodes from the grid\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // sorts the nodes by distance\n\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n} // returns an array of unvisited neighbours of the node\n\n\nfunction getUnvisitedNeighbours(node, grid) {\n  const neighbours = [];\n  const {\n    row,\n    col\n  } = node;\n  if (row > 0) neighbours.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbours.push(grid[row + 1][col]);\n  if (col > 0) neighbours.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n  return neighbours.filter(neighbor => !neighbor.isVisited);\n} // backtracks from the finishNode to find the shortest path\n// only works when called *after* the algorithm function is executed\n\n\nfunction getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"names":["dijkstra","dfs","bfs","astar","getNodesInShortestPathOrder","getAllNodes","sortNodesByDistance","getUnvisitedNeighbours","grid","nodes","row","node","push","unvisitedNodes","sort","nodeA","nodeB","distance","neighbours","col","length","filter","neighbor","isVisited","finishNode","nodesInShortestPathOrder","currentNode","unshift","previousNode"],"sources":["D:/maze-solver-main/src/algorithms/index.js"],"sourcesContent":["import { dijkstra } from \"./dijkstra\";\nimport { dfs } from \"./dfs\";\nimport { bfs } from \"./bfs\";\nimport { astar } from \"./astar\";\n\nexport { dijkstra, dfs, bfs, astar, getNodesInShortestPathOrder, getAllNodes, sortNodesByDistance, getUnvisitedNeighbours };\n\n/*----------------------------------------------------common helper functions----------------------------------------------------*/\n// returns an array of nodes from the grid\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// sorts the nodes by distance\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\n// returns an array of unvisited neighbours of the node\nfunction getUnvisitedNeighbours(node, grid) {\n  const neighbours = [];\n  const { row, col } = node;\n  if (row > 0)\n    neighbours.push(grid[row - 1][col]);\n  if (row < grid.length - 1)\n    neighbours.push(grid[row + 1][col]);\n  if (col > 0)\n    neighbours.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1)\n    neighbours.push(grid[row][col + 1]);\n  return neighbours.filter(neighbor => !neighbor.isVisited);\n}\n  \n// backtracks from the finishNode to find the shortest path\n// only works when called *after* the algorithm function is executed\nfunction getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}"],"mappings":"AAAA,SAASA,QAAT,QAAyB,YAAzB;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,KAAT,QAAsB,SAAtB;AAEA,SAASH,QAAT,EAAmBC,GAAnB,EAAwBC,GAAxB,EAA6BC,KAA7B,EAAoCC,2BAApC,EAAiEC,WAAjE,EAA8EC,mBAA9E,EAAmGC,sBAAnG;AAEA;AACA;;AACA,SAASF,WAAT,CAAqBG,IAArB,EAA2B;EACzB,MAAMC,KAAK,GAAG,EAAd;;EACA,KAAK,MAAMC,GAAX,IAAkBF,IAAlB,EAAwB;IACtB,KAAK,MAAMG,IAAX,IAAmBD,GAAnB,EAAwB;MACtBD,KAAK,CAACG,IAAN,CAAWD,IAAX;IACD;EACF;;EACD,OAAOF,KAAP;AACD,C,CAED;;;AACA,SAASH,mBAAT,CAA6BO,cAA7B,EAA6C;EAC3CA,cAAc,CAACC,IAAf,CAAoB,CAACC,KAAD,EAAQC,KAAR,KAAkBD,KAAK,CAACE,QAAN,GAAiBD,KAAK,CAACC,QAA7D;AACD,C,CAED;;;AACA,SAASV,sBAAT,CAAgCI,IAAhC,EAAsCH,IAAtC,EAA4C;EAC1C,MAAMU,UAAU,GAAG,EAAnB;EACA,MAAM;IAAER,GAAF;IAAOS;EAAP,IAAeR,IAArB;EACA,IAAID,GAAG,GAAG,CAAV,EACEQ,UAAU,CAACN,IAAX,CAAgBJ,IAAI,CAACE,GAAG,GAAG,CAAP,CAAJ,CAAcS,GAAd,CAAhB;EACF,IAAIT,GAAG,GAAGF,IAAI,CAACY,MAAL,GAAc,CAAxB,EACEF,UAAU,CAACN,IAAX,CAAgBJ,IAAI,CAACE,GAAG,GAAG,CAAP,CAAJ,CAAcS,GAAd,CAAhB;EACF,IAAIA,GAAG,GAAG,CAAV,EACED,UAAU,CAACN,IAAX,CAAgBJ,IAAI,CAACE,GAAD,CAAJ,CAAUS,GAAG,GAAG,CAAhB,CAAhB;EACF,IAAIA,GAAG,GAAGX,IAAI,CAAC,CAAD,CAAJ,CAAQY,MAAR,GAAiB,CAA3B,EACEF,UAAU,CAACN,IAAX,CAAgBJ,IAAI,CAACE,GAAD,CAAJ,CAAUS,GAAG,GAAG,CAAhB,CAAhB;EACF,OAAOD,UAAU,CAACG,MAAX,CAAkBC,QAAQ,IAAI,CAACA,QAAQ,CAACC,SAAxC,CAAP;AACD,C,CAED;AACA;;;AACA,SAASnB,2BAAT,CAAqCoB,UAArC,EAAiD;EAC/C,MAAMC,wBAAwB,GAAG,EAAjC;EACA,IAAIC,WAAW,GAAGF,UAAlB;;EACA,OAAOE,WAAW,KAAK,IAAvB,EAA6B;IAC3BD,wBAAwB,CAACE,OAAzB,CAAiCD,WAAjC;IACAA,WAAW,GAAGA,WAAW,CAACE,YAA1B;EACD;;EACD,OAAOH,wBAAP;AACD"},"metadata":{},"sourceType":"module"}